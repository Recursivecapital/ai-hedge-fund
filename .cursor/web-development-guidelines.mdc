---
description: 
globs: 
alwaysApply: true
---
 # AI Hedge Fund Web Application Development Guidelines

## Technology Stack
- Framework: Next.js 15 (App Router)
- Language: TypeScript
- Styling: Tailwind CSS
- Component Library: shadcn/ui
- State Management: TanStack Query + Zustand
- Form Handling: React Hook Form + Zod
- Testing: Vitest + Testing Library
- API: tRPC for type-safe API calls

## Project Structure
```
ai-hedge-fund/
├── src/           # Python backend (DO NOT MODIFY)
├── web/           # Next.js frontend
│   ├── app/      # Next.js app router pages
│   ├── components/# React components
│   │   ├── ui/   # shadcn components
│   │   └── custom/# custom components
│   ├── lib/      # Utility functions
│   ├── styles/   # Global styles
│   ├── types/    # TypeScript types
│   └── api/      # API routes
```

## Strict Rules
1. Backend Integration
   - NEVER modify Python code in @src directory
   - Create API wrappers around Python functionality
   - Use environment variables for configuration
   - Implement proper error handling for Python interactions

2. Component Development
   - Use TypeScript strictly (no any types)
   - Follow Atomic Design principles
   - Implement proper loading states
   - Handle error boundaries
   - Write unit tests for components

3. State Management
   - Use Zustand for global state
   - Use TanStack Query for server state
   - Implement proper caching strategies
   - Handle optimistic updates

4. Styling Guidelines
   - Use Tailwind CSS classes only
   - Follow shadcn/ui patterns
   - Maintain dark/light mode support
   - Use CSS variables for theming
   - Keep responsive design in mind

5. Performance Rules
   - Implement proper code splitting
   - Use Next.js Image component
   - Optimize for Core Web Vitals
   - Monitor bundle size
   - Use proper caching strategies

6. Security Guidelines
   - Implement proper authentication
   - Validate all inputs
   - Sanitize data display
   - Handle sensitive data properly
   - Use HTTPS only

## Feature Implementation
1. Dashboard
   - Portfolio overview
   - Agent performance metrics
   - Real-time trading signals
   - Risk metrics visualization

2. Agent Management
   - Agent configuration interface
   - Strategy visualization
   - Performance analytics
   - Decision history

3. Portfolio Management
   - Position overview
   - Risk management interface
   - Order management
   - Performance tracking

4. Analytics
   - Trading performance metrics
   - Agent decision analysis
   - Risk analytics
   - Market analysis

5. Settings
   - API configuration
   - Agent parameters
   - Risk parameters
   - Notification settings

## Development Workflow

### Feature Development
- Each feature branch should be named after the feature being developed (e.g., `feature/agent-dashboard`)
- Create a new branch from `main` for each feature
- Commit frequently with descriptive messages
- Push changes to the remote repository regularly

### Testing
- Write unit tests for all new functionality
- Ensure all tests pass before submitting a pull request
- Test both API endpoints and UI components
- Use Jest for frontend tests and Pytest for backend tests

### Code Quality
- Follow ESLint and Prettier configurations
- Run linting before committing code
- Address all warnings and errors
- Conduct code reviews for all pull requests

### Deployment
- Use CI/CD pipeline for automated testing and deployment
- Stage changes in a development environment before production
- Follow the deployment checklist in the documentation
- Monitor deployments for any issues

### Documentation
- Update API documentation for any new or changed endpoints
- Document all new components with JSDoc comments
- Update the README.md as needed
- Keep the CHANGELOG.md up to date

### Monitoring
- Set up logging for all critical operations
- Monitor performance metrics
- Track error rates and user interactions
- Set up alerts for critical issues

### Todo List Management and GitHub Workflow
- Before marking a task as complete in the todo list, ensure it's properly tested
- When completing a task:
  1. Test the feature thoroughly in your local environment
  2. Update the todo list in `.cursor/todo-list.md` by marking the task as complete
  3. Add an entry to the CHANGELOG.md under the appropriate section
  4. Commit changes with a descriptive message following the format: `[Feature] Complete <task name>`
  5. Push changes to GitHub only after verification that the feature works as expected
  6. Create a pull request if working on a feature branch
  7. Request a code review from at least one team member
- Never push incomplete or untested features to the main branch
- When in doubt about a feature's completion status, mark it as in-progress rather than complete
- Regularly sync your local repository with the remote to stay updated with team progress

## Documentation
- Document all components
- Maintain API documentation
- Update README.md
- Keep changelog updated

## Monitoring
- Implement error tracking
- Monitor performance metrics
- Track user analytics
- Log API usage